CLANG_INCLUDES=-I $(CLOSURE_INCLUDES) -I partitioned/$(IPCMODE)/autogen

SRC=./partitioned/$(IPCMODE)/purple/${PROG}_rpc.c \
./partitioned/$(IPCMODE)/purple/${PROG}.c \
./partitioned/$(IPCMODE)/orange/${PROG}_rpc.c \
./partitioned/$(IPCMODE)/orange/${PROG}.c \
./refactored/${PROG}.c

HDR=./partitioned/$(IPCMODE)/purple/${PROG}_rpc.h \
./partitioned/$(IPCMODE)/orange/${PROG}_rpc.h

MODC=$(patsubst %.c, %.mod.c, $(SRC)) 
MODH=$(patsubst %.h, %.mod.h, $(HDR)) 
MODLL=$(patsubst %.mod.c, %.mod.ll, $(MODC))
MODCJC=$(patsubst %.c, %.c.clemap.json,$(SRC))
MODCJH=$(patsubst %.h,%.h.clemap.json,$(HDR))

all:
	echo done

clean:
	rm -f $(MODC) $(MODH) $(MODLL) $(MODCJC) $(MODCJH)

.SECONDARY:

verify: prep
	$(VERIFIER) -v refactored partitioned/$(IPCMODE)/purple partitioned/$(IPCMODE)/orange

prep: $(MODC) $(MODH) $(MODLL)
	# rename foo.mod.? to foo.? 
	# invoke llvm-link?
	echo Done

%.mod.ll: %.mod.c
	$(CLANG) $(CLANG_FLAGS) $(CLANG_INCLUDES) -o $@ $<

%.mod.c: %.c
	$(PYTHON) $(PREPROCESSOR) -s ${CLOSURE_SCHEMAS}/cle-schema.json -f $<

%.mod.h: %.h
	$(PYTHON) $(PREPROCESSOR) -s ${CLOSURE_SCHEMAS}/cle-schema.json -f $<
